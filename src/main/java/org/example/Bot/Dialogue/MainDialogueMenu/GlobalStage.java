package main.java.org.example.Bot.Dialogue.MainDialogueMenu;

import main.java.org.example.Bot.Dialogue.Interfaces.PreValidationResponse;
import main.java.org.example.Bot.Excel.Templates.Referee;
import main.java.org.example.Main;
import main.java.org.example.Bot.Dialogue.Answer;
import main.java.org.example.Bot.Dialogue.IStage;
import main.java.org.example.Bot.TG.SafeUpdateParser;
import main.java.org.example.Bot.TG.TGSender;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.sql.Ref;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import static main.java.org.example.Bot.Dialogue.Interfaces.ValidationResult.*;

public class GlobalStage extends IStage // –°—Ç–∞–¥–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
{
	public GlobalStage(List<IStage> list)
	{
		init(list.size());
	}
	
	@Override
	public void action()
	{
	
	}
	
	@Override
	public PreValidationResponse preValidation(Answer answer)
	{
		if(Objects.equals(answer.getMessage(), "/start")) return new PreValidationResponse(FORCE_REPEAT, 0);
		if(Objects.equals(answer.getMessage(), "/NewReferee")) return new PreValidationResponse(NEXT_STAGE, 1);
		if(Objects.equals(answer.getMessage(), "/GlobalRating")) return new PreValidationResponse(NEXT_STAGE, 2);
		if(Objects.equals(answer.getMessage(), "/NewCompetition")) return new PreValidationResponse(NEXT_STAGE, 3);
		if(Objects.equals(answer.getMessage(), "/Register")) return new PreValidationResponse(NEXT_STAGE, 4);
		if(Objects.equals(answer.getMessage(), "/PlanCompetition")) return new PreValidationResponse(NEXT_STAGE, 6);
		if(Objects.equals(answer.getMessage(), "/Account")) return new PreValidationResponse(NEXT_STAGE, 7);
		
		if(answer.hasPhone())
		{
			Main.updateHandler.getActiveUser().phoneNumber = answer.getPhone();
			return new PreValidationResponse(NEXT_STAGE, 5);
		}
		
		return new PreValidationResponse(NOT_FOUND, -1);
	}
	
	@Override
	public void addValidators()
	{
		validators.put(0, (Answer) ->
		{
			String text = """
					–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—É–¥–µ–π "FEMIDA".
					
					–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
					
					‚ûï*–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å—É–¥—å—é:*
					/NewReferee
					
					‚ûï*–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ:*
					/NewCompetition
					
					üìÉ*–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö —Å—É–¥–µ–π:*
					/GlobalRating
									
					‚¨áÔ∏è*–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:*
					/Register
					
					üïê*–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ*
					/PlanCompetition
					
					üòê*–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç*
					/Account
					""";
			
			TGSender.send(text);
			return false;
		});
		
		//NewReferee
		validators.put(1, (Answer answer) -> true);
		
		// GlobalRating
		validators.put(2, (Answer) ->
		{
			String rating = Main.sql.getGlobalRating();
			TGSender.send("`–ë–∞–ª–ª—ã | –§–ò–û —Å—É–¥—å–∏\n------+-------------------\n" + rating + "`");
			return false;
		});
		
		//NewCompetition
		validators.put(3, (Answer) -> true);
		
		//Register
		validators.put(4, (Answer) ->
		{
			SendMessage sendMessage = new SendMessage();
			sendMessage.setChatId(SafeUpdateParser.getChatID());
			sendMessage.setText("–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ö–æ–Ω–ø–∫–∞ —Å–Ω–∏–∑—É)");
			
			ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
			sendMessage.setReplyMarkup(replyKeyboardMarkup);
			replyKeyboardMarkup.setResizeKeyboard(true);
			replyKeyboardMarkup.setOneTimeKeyboard(true);
			
			List<KeyboardRow> keyboard = new ArrayList<>();
			
			KeyboardRow keyboardFirstRow = new KeyboardRow();
			KeyboardButton keyboardButton = new KeyboardButton();
			
			keyboardButton.setText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä");
			keyboardButton.setRequestContact(true);
			keyboardFirstRow.add(keyboardButton);
			
			keyboard.add(keyboardFirstRow);
			replyKeyboardMarkup.setKeyboard(keyboard);
			
			TGSender.send(sendMessage);
			return false;
		});
		
		//Phone validation
		validators.put(5, (Answer) ->
		{
			String phone = Main.updateHandler.getActiveUser().phoneNumber;
			
			phone = "8" + phone.substring(phone.length() - 10);
			
			TGSender.send("*–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É:* " + phone);
			
			int id = Referee.findRefereeByPhone(phone);
			
			if(id == -1)
			{
				TGSender.send("‚ùóÔ∏èÔ∏èÔ∏èÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º");
			}
			else
			{
				Referee referee = new Referee(id);
				TGSender.send(referee.toNiceString());
			}
			return false;
		});
		
		validators.put(6, (Answer) ->
		{
			TGSender.send("‚ùóÔ∏èÔ∏èÔ∏èÔ∏è–ï—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ...");
			return false;
		});
		
		validators.put(7, (Answer) ->
		{
			TGSender.send("‚ùóÔ∏èÔ∏èÔ∏èÔ∏è–ï—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ...");
			return false;
		});
		
	}
}
