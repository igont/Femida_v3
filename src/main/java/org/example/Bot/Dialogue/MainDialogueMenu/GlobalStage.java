package main.java.org.example.Bot.Dialogue.MainDialogueMenu;

import main.java.org.example.Bot.Dialogue.Interfaces.PreValidationResponse;
import main.java.org.example.Bot.Dialogue.Possibility;
import main.java.org.example.Bot.Dialogue.Role;
import main.java.org.example.Bot.Excel.Templates.Referee;
import main.java.org.example.DataBase.SQL;
import main.java.org.example.Main;
import main.java.org.example.Bot.Dialogue.Answer;
import main.java.org.example.Bot.Dialogue.IStage;
import main.java.org.example.Bot.TG.SafeUpdateParser;
import main.java.org.example.Bot.TG.TGSender;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.sql.Ref;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import static main.java.org.example.Bot.Dialogue.Interfaces.ValidationResult.*;

public class GlobalStage extends IStage // –°—Ç–∞–¥–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
{
	public GlobalStage(List<IStage> list)
	{
		init(list.size());
	}
	
	@Override
	public void action()
	{
	}
	
	@Override
	public PreValidationResponse preValidation(Answer answer)
	{
		if(Objects.equals(answer.getMessage(), "/commands")) return new PreValidationResponse(FORCE_REPEAT, 0);
		if(Objects.equals(answer.getMessage(), "/start")) return new PreValidationResponse(FORCE_REPEAT, 0);
		
		if(Objects.equals(answer.getMessage(), "/NewReferee")) return new PreValidationResponse(NEXT_STAGE, 1);
		if(Objects.equals(answer.getMessage(), "/GlobalRating")) return new PreValidationResponse(NEXT_STAGE, 2);
		if(Objects.equals(answer.getMessage(), "/NewCompetition")) return new PreValidationResponse(NEXT_STAGE, 3);
		if(Objects.equals(answer.getMessage(), "/Account")) return new PreValidationResponse(NEXT_STAGE, 4);
		if(Objects.equals(answer.getMessage(), "/PlanCompetition")) return new PreValidationResponse(NEXT_STAGE, 6);
		if(Objects.equals(answer.getMessage(), "/Register")) return new PreValidationResponse(NEXT_STAGE, 7);
		
		if(answer.hasPhone())
		{
			Main.updateHandler.getActiveUser().phoneNumber = answer.getPhone();
			return new PreValidationResponse(NEXT_STAGE, 5);
		}
		
		return new PreValidationResponse(NOT_FOUND, -1);
	}
	
	@Override
	public void addValidators()
	{
		validators.put(0, (Answer) ->
		{
			int id = Main.updateHandler.getActiveUser().femidaID;
			Referee referee = new Referee(id);
			
			String head = "";
			if(id == -1)
			{
				if(!Objects.equals(Main.updateHandler.getActiveUser().phoneNumber, ""))
				{
					head = """
						–ê–∫–∫–∞—É–Ω—Ç–∞ —Å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö —Å—É–¥–µ–π.
						
						–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
						
						""";
				}
				else
				{
					head = """
						–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à /Account, –∑–∞—Ç–µ–º –≤–Ω–æ–≤—å –≤—ã–∑–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ /commands –∏–∑ –ú–µ–Ω—é.
						
						–ü–æ–∫–∞ –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
						
						""";
				}
			}else
			{
				head = referee.getFIO() + ", –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";
			}
			
			
			String newReferee = """
					‚ûï*–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å—É–¥—å—é:*
					/NewReferee
					
					""";
			
			String newCompetition = """
					‚ûï*–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ:*
					/NewCompetition
					
					""";
			
			String globalRating = """
					üìÉ*–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å—É–¥–µ–π:*
					/GlobalRating
					
					""";
			
			String planCompetition = """
					üïê*–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ*
					/PlanCompetition
					
					""";
			
			String account = """
					üòê*–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç*
					/Account
					
					""";
			
			String admin = """
					*–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥*
					/getAdminPanel
					""";
			
			String commands = head;
			
			if(id != -1)
			{
				Role role = referee.getRole();
				
				if(role.getPossibility(Possibility.NEW_REFEREE)) commands += newReferee;
				if(role.getPossibility(Possibility.NEW_COMPETITION)) commands += newCompetition;
				if(role.getPossibility(Possibility.PLAN_COMPETITION)) commands += planCompetition;
				if(role.getPossibility(Possibility.ADMIN)) commands += admin;
			}
			
			commands += globalRating + account;
			TGSender.send(commands);
			return false;
		});
		
		//NewReferee
		validators.put(1, (Answer answer) -> true);
		
		// GlobalRating
		validators.put(2, (Answer) ->
		{
			String rating = Main.sql.getGlobalRating();
			TGSender.send("`–ë–∞–ª–ª—ã | –§–ò–û —Å—É–¥—å–∏\n------+-------------------\n" + rating + "`");
			return false;
		});
		
		//NewCompetition
		validators.put(3, (Answer) -> true);
		
		//Register
		validators.put(4, (Answer) ->
		{
			if(Main.updateHandler.getActiveUser().femidaID == -1)
			{
				sendPhoneButton();
			}
			else
			{
				Referee referee = new Referee(Main.updateHandler.getActiveUser().femidaID);
				TGSender.send(referee.toNiceString());
			}
			
			
			return false;
		});
		
		//Phone validation
		validators.put(5, (Answer) ->
		{
			String phone = Main.updateHandler.getActiveUser().phoneNumber;
			//phone = new Referee(1).getPhone();
			
			phone = "8" + phone.substring(phone.length() - 10);
			
			TGSender.send("*–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É:* " + phone);
			
			int id = Referee.findRefereeByPhone(phone);
			
			if(id == -1)
			{
				TGSender.send("‚ùóÔ∏èÔ∏èÔ∏èÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º\n–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ /Register");
			}
			else
			{
				Referee referee = new Referee(id);
				TGSender.send(referee.toNiceString());
			}
			Main.updateHandler.getActiveUser().femidaID = id;
			return false;
		});
		
		validators.put(6, (Answer) ->
		{
			TGSender.send("‚ùóÔ∏èÔ∏èÔ∏èÔ∏è–ï—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ...");
			return false;
		});
		validators.put(7, (Answer) ->true);
	}
	
	private static void sendPhoneButton()
	{
		SendMessage sendMessage = new SendMessage();
		sendMessage.setChatId(SafeUpdateParser.getChatID());
		sendMessage.setText("–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ö–æ–Ω–ø–∫–∞ —Å–Ω–∏–∑—É)");
		
		ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
		sendMessage.setReplyMarkup(replyKeyboardMarkup);
		replyKeyboardMarkup.setResizeKeyboard(true);
		replyKeyboardMarkup.setOneTimeKeyboard(true);
		
		List<KeyboardRow> keyboard = new ArrayList<>();
		
		KeyboardRow keyboardFirstRow = new KeyboardRow();
		KeyboardButton keyboardButton = new KeyboardButton();
		
		keyboardButton.setText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä");
		keyboardButton.setRequestContact(true);
		keyboardFirstRow.add(keyboardButton);
		
		keyboard.add(keyboardFirstRow);
		replyKeyboardMarkup.setKeyboard(keyboard);
		
		TGSender.send(sendMessage);
	}
}
